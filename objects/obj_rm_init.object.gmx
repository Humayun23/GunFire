<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.dir="";
global.lighting=1;
//application_surface_enable(false);
scr_settings_map_init();

/*switch (os_type)
{
case os_win32 : global.dir= working_directory+"CS2D\";break;
case os_android : global.dir = "\sdcard\CS2D\"; break;
}*/
scr_Sprites_Load();
if (os_is_network_connected())
{
show_debug_message("**OS is connected to network");
scale=1;
dir=0; //scale decrease

text="Checking Version";
alarm[1]=room_speed/3;
angle=0;
global._ip="";
global.serverstatus=-1;

post = http_post_string(website+"/getip.php","");
//
timeout=15;
updatefile=http_get_file(website+"/games/gf_version.inf",global.g_dir+"\sys\_gver");
alarm[0]=room_speed;
}
else
{
show_debug_message("**OS is not connected to netowrk");
global._ip="Not Available"
room_goto_next();
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (text)
{
case "Checking Version":text="Checking Version.";break;
case "Checking Version.":text="Checking Version..";break;
case "Checking Version..":text="Checking Version...";break;
case "Checking Version...":text="Checking Version";break;
}

alarm[1]=room_speed/3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeout-=1;
alarm[0]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle+=5;

if (timeout&lt;=0)
{
global._ip="TimeOut";
room_goto_next();
}
if (scale&lt;=0.3)
{
dir=1;
}
else
if (scale&gt;=1)
dir=0;

if (dir==0)
{
scale-=0.01;
}else
scale+=0.01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global._ip="Skipped";
room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_map_find_value(async_load,"id")==post)
{
if (ds_map_find_value(async_load,"status")==0)
{
str=ds_map_find_value(async_load,"result")+chr(13);
show_debug_message("result :"+string(str));
i=1;
while (string_char_at(str,i)!=chr(13))
 {
 global._ip+=string_char_at(str,i);
 i++;
 }
//global._ip=str;
room_goto_next();;
show_debug_message("post status : 0 IP:"+string(global._ip));
}
else
show_debug_message("post status :"+string(ds_map_find_value(async_load,"status")));
}
if ds_map_find_value(async_load, "id") == updatefile
   {
   var status = ds_map_find_value(async_load, "status");
   if status == 0
      {
      show_debug_message("loading done")
      var result = ds_map_find_value(async_load, "result");
//      if  result==0
         {
         room_goto_next();
         }
      }
      else
      if (status==1)
      timeout=10;
      else
      if (status&lt;0) room_goto_next();
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_load_demo(global.g_dir+"/maps/GunFire.gfmap");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_font(fnt_arial);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(room_width/2,(room_height/2)+30,text);
if (sprite_exists(spr_load))
draw_sprite_ext(spr_load,0,room_width/2,room_height/2,scale,scale,angle,c_white,1);
if (timeout&lt;6){
draw_text(room_width/2,(room_height/2)+50,"TimeOut : "+string(timeout));}
draw_set_font(fnt_12);
draw_set_colour(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
