<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.__mode==0){ instance_destroy(); exit;}
//if (os_is_network_connected()){
   Socket = network_create_socket( network_socket_tcp );
   if (Socket&lt;0)
   {
   network_destroy(Socket);
   instance_destroy();
   exit;
   }
   ip=get_string("Enter ip:","127.0.0.1");
   if (ip=="") {   network_destroy(Socket); instance_destroy();}
   isConnected = network_connect( Socket ,ip , 1111);
   if (isConnected&lt;0)
   {
   network_destroy(Socket);
   instance_destroy();
   
   exit;
   }
   Buffer = buffer_create( 1024 , buffer_fixed , 1 );
   Result = 0;
   Ping = 0;
   DummiesList = ds_list_create();
//   }else instance_destroy();


ox=0;
oy=0;
oangle=0;
owip=-1;
ofi=-1;

alarm[0]=room_speed/6;

global.__time=current_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
   buffer_seek( Buffer , buffer_seek_start , 0 );
   buffer_write( Buffer , buffer_u8 , 1 );
   buffer_write( Buffer , buffer_u16 , obj_Player.x );
   buffer_write( Buffer , buffer_u16 , obj_Player.y );
   buffer_write( Buffer , buffer_u16 , obj_Player.direction );
   buffer_write( Buffer , buffer_u16 , obj_Player.weaponid );
   buffer_write( Buffer , buffer_u16 , obj_Player.foot_index*100);
 
   global.__time=current_time;     
   Result = network_send_packet( Socket , Buffer , buffer_tell( Buffer ) );
   alarm[0]=room_speed/6;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_Player)){
   
   buffer_seek ( Buffer , buffer_seek_start , 0 );
   buffer_write( Buffer , buffer_u8 , 1 );
   buffer_write( Buffer , buffer_u16 , floor(obj_Player.x ));
   buffer_write( Buffer , buffer_u16 , floor(obj_Player.y ));
   buffer_write( Buffer , buffer_u16 , obj_Player.direction );
   buffer_write( Buffer , buffer_u16 , obj_Player.image_angle );
   buffer_write( Buffer , buffer_u8 , obj_Player.weaponid );
   buffer_write( Buffer , buffer_u8 , obj_Player.foot_index*10 );
   buffer_write( Buffer , buffer_u16 , obj_Player.hp*10 );

   global.__time=current_time;     
   Result = network_send_packet( Socket , Buffer , buffer_tell( Buffer ) );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   var type_event = ds_map_find_value( async_load , "type" );
   switch( type_event ) {
      case network_type_data:
         var buffer = ds_map_find_value( async_load , "buffer" );
         buffer_seek( buffer , buffer_seek_start , 0 );
         ReceivedPacket( buffer );
      break;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_red);
draw_text(0,0,"NO:"+string(instance_number(oDummy)));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(Buffer,buffer_seek_start,0);
buffer_write(Buffer,buffer_u8,4);
buffer_write(Buffer,buffer_string,"Value:"+string(irandom(100)));
network_send_packet(Socket,Buffer,buffer_tell(Buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
